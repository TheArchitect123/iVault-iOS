// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using AudioToolbox;
using Foundation;
using UIKit;
using CoreGraphics;


namespace SecurePDF
{
	public partial class WordController : UITableViewController
	{
		public WordController (IntPtr handle) : base (handle)
		{
		}

		public WordController(){}

		public List<string> pdfList = new List<string>() { };
		public List<string> creationDate = new List<string>() { };
		public List<string> size = new List<string>() { };
		List<int> corruptIndex = new List<int>() { };
		public List<UIImage> thumbnailImage = new List<UIImage>() { };
		UISearchController searchController = new UISearchController();
		UISearchBar search = new UISearchBar();
		public PDFReader pdfRead = new PDFReader();
		public AppDelegate appDelegate
		{
			get
			{
				return (AppDelegate)UIApplication.SharedApplication.Delegate;
			}
		}

		public override void ViewDidAppear(bool animated)
		{
			this.NavigationController.SetToolbarHidden(true, true);

			if (this.appDelegate.tableWordSearch == 1)
			{
				this.TableView.ScrollToRow(this.appDelegate.selectedIndexWord, UITableViewScrollPosition.Top, true);
				this.TableView.SelectRow(this.appDelegate.selectedIndexWord, true, UITableViewScrollPosition.Top);
				//	Console.WriteLine("Search selected");
			}
		}

		private void addImageContext(string[] directory, int i)
		{
			Console.WriteLine("i: " + i);
			try
			{
				CGPDFDocument pdfToLoad = CGPDFDocument.FromFile(directory[i]);
				if (pdfToLoad == null)
				{
					throw new NullReferenceException();
				}
				else {
					var firstPage = pdfToLoad.GetPage(1);
					var width = 240.0f;
					var pageRect = firstPage.GetBoxRect(CGPDFBox.Media);


					var pdfScale = width / pageRect.Size.Width;

					pageRect.Size = new CGSize(pageRect.Size.Width * pdfScale, pageRect.Size.Height * pdfScale);
					pageRect.X = 0;
					pageRect.Y = 0;
					UIGraphics.BeginImageContext(pageRect.Size);

					var context = UIGraphics.GetCurrentContext();

					context.SetFillColor(1.0f, 1.0f, 1.0f, 1.0f);
					context.FillRect(pageRect);
					context.SaveState();
					context.TranslateCTM(0.0f, pageRect.Size.Height);
					context.ScaleCTM(1.0f, -1.0f);
					context.ConcatCTM(firstPage.GetDrawingTransform(CGPDFBox.Media, pageRect, 0, true));
					context.DrawPDFPage(firstPage);
					context.RestoreState();

					UIImage thm = UIGraphics.GetImageFromCurrentImageContext();

					UIGraphics.EndImageContext();
					this.thumbnailImage.Add(thm);
				}
			}
			catch (NullReferenceException)
			{
				UIImage nullImage = new UIImage();
				this.corruptIndex.Add(i);
				this.thumbnailImage.Add(nullImage);
			}
		}

		public override void ViewDidLoad()
		{
			this.NavigationController.NavigationBar.BackgroundColor = UIColor.White;
			this.NavigationItem.Title = "My Documents";
			this.TableView.RowHeight = 70.0f;
			this.appDelegate.documentsWord = this;
			this.appDelegate.resultsStringWord = this.pdfList;
			UIStoryboard story = UIStoryboard.FromName("Main", NSBundle.MainBundle);
			this.appDelegate.PDF = story.InstantiateViewController("PDFReader") as PDFReader;

			this.searchController = new UISearchController(new resultsControllerWord());
			this.searchController.SearchResultsUpdater = new searchUpdatorWord(this);
			this.searchController.DimsBackgroundDuringPresentation = true;
			this.searchController.HidesNavigationBarDuringPresentation = true;

			this.search = this.searchController.SearchBar;
			this.EdgesForExtendedLayout = UIRectEdge.None;

			this.search.Frame = new CGRect(0, 0, UIScreen.MainScreen.Bounds.Width - 5.0f, 50.0f);
			this.search.SpellCheckingType = UITextSpellCheckingType.No;
			this.search.BarStyle = UIBarStyle.Default;
			this.search.SearchBarStyle = UISearchBarStyle.Prominent;
			this.search.Placeholder = "Search...";

			this.search.CancelButtonClicked += (object sender, EventArgs e) =>
			{
				this.search.ResignFirstResponder();
			};
			this.search.TextChanged += (object sender, UISearchBarTextChangedEventArgs e) =>
			{
				SystemSound keyboardClick = new SystemSound(1105);
				keyboardClick.PlaySystemSound();
			};

			this.search.SearchButtonClicked += (object sender, EventArgs e) =>
			{
				search.ResignFirstResponder();
			};

			this.TableView.TableHeaderView = search;

			var documents = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
			var directory = Directory.GetFiles(documents, "*.doc");
			var directoryWord_2 = Directory.GetFiles(documents, "*.dot");
			var directoryWord_3 = Directory.GetFiles(documents, "*.odt");
			var directoryWord_4 = Directory.GetFiles(documents, "*.rtf");



			//other formats

			//excel
			var directoryExcel = Directory.GetFiles(documents, "*.xsl");
			var directoryExcel_2 = Directory.GetFiles(documents, "*.xlt");

			//powerpoint
			var directoryPower = Directory.GetFiles(documents, "*.ppt");



			var fileName = Path.Combine(documents, "*.doc");

			this.appDelegate.directories = directory;

			NSError error = new NSError();
			try
			{
				if (NSFileManager.DefaultManager.GetDirectoryContent(documents, out error).Length == 0)
				{
					throw new FileNotFoundException();
				}
				else {
					//word formats
					//.doc
					for (int i = 0; i <= directory.Length - 1; i++)
					{

						try
						{
							if (directory[i] == null)
							{
								throw new ArgumentOutOfRangeException();
							}
							else {
								this.pdfList.Add(Path.GetFileName(directory[i]));
								this.creationDate.Add(Convert.ToString(Directory.GetCreationTime(directory[i])));
								addImageContext(directory, i);
							}
						}
						catch (ArgumentOutOfRangeException)
						{
							Console.WriteLine("File does not exist");
						}
					}
					//.dot
					for (int i = 0; i <= directoryWord_2.Length - 1; i++)
					{

						try
						{
							if (directoryWord_2[i] == null)
							{
								throw new ArgumentOutOfRangeException();
							}
							else {
								this.pdfList.Add(Path.GetFileName(directoryWord_2[i]));
								this.creationDate.Add(Convert.ToString(Directory.GetCreationTime(directoryWord_2[i])));
								addImageContext(directoryWord_2, i);
							}
						}
						catch (ArgumentOutOfRangeException)
						{
							Console.WriteLine("File does not exist");
						}
					}

					//.odt
					for (int i = 0; i <= directoryWord_3.Length - 1; i++)
					{

						try
						{
							if (directoryWord_3[i] == null)
							{
								throw new ArgumentOutOfRangeException();
							}
							else {
								this.pdfList.Add(Path.GetFileName(directoryWord_3[i]));
								this.creationDate.Add(Convert.ToString(Directory.GetCreationTime(directoryWord_3[i])));
								addImageContext(directoryWord_3, i);
							}
						}
						catch (ArgumentOutOfRangeException)
						{
							Console.WriteLine("File does not exist");
						}
					}

					//.rtf
					for (int i = 0; i <= directoryWord_4.Length - 1; i++)
					{

						try
						{
							if (directoryWord_4[i] == null)
							{
								throw new ArgumentOutOfRangeException();
							}
							else {
								this.pdfList.Add(Path.GetFileName(directoryWord_4[i]));
								this.creationDate.Add(Convert.ToString(Directory.GetCreationTime(directoryWord_4[i])));
								addImageContext(directoryWord_4, i);
							}
						}
						catch (ArgumentOutOfRangeException)
						{
							Console.WriteLine("File does not exist");
						}
					}

					//excel formats
					//.xsl

					for (int i = 0; i <= directoryExcel.Length - 1; i++)
					{

						try
						{
							if (directoryExcel[i] == null)
							{
								throw new ArgumentOutOfRangeException();
							}
							else {
								this.pdfList.Add(Path.GetFileName(directoryExcel[i]));
								this.creationDate.Add(Convert.ToString(Directory.GetCreationTime(directoryExcel[i])));
								addImageContext(directoryExcel, i);
							}
						}
						catch (ArgumentOutOfRangeException)
						{
							Console.WriteLine("File does not exist");
						}
					}

					//xlt
					for (int i = 0; i <= directoryExcel_2.Length - 1; i++)
					{

						try
						{
							if (directoryExcel_2[i] == null)
							{
								throw new ArgumentOutOfRangeException();
							}
							else {
								this.pdfList.Add(Path.GetFileName(directoryExcel_2[i]));
								this.creationDate.Add(Convert.ToString(Directory.GetCreationTime(directoryExcel_2[i])));
								addImageContext(directoryExcel_2, i);
							}
						}
						catch (ArgumentOutOfRangeException)
						{
							Console.WriteLine("File does not exist");
						}
					}


					//power points 
					//.ppt
					for (int i = 0; i <= directoryPower.Length - 1; i++)
					{

						try
						{
							if (directoryPower[i] == null)
							{
								throw new ArgumentOutOfRangeException();
							}
							else {
								this.pdfList.Add(Path.GetFileName(directoryPower[i]));
								this.creationDate.Add(Convert.ToString(Directory.GetCreationTime(directoryPower[i])));
								addImageContext(directoryPower, i);
							}
						}
						catch (ArgumentOutOfRangeException)
						{
							Console.WriteLine("File does not exist");
						}
					}
				}
			}
			catch (FileNotFoundException)
			{
				Console.WriteLine("Cannot find the specified pdf file in the library");
			}

		}

		public override nint RowsInSection(UITableView tableView, nint section)
		{
			return this.pdfList.Count;
		}

		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			UITableViewCell pdfCell = new UITableViewCell(UITableViewCellStyle.Subtitle, "pdfCell");

			if (pdfCell == null)
			{
				pdfCell = new UITableViewCell(UITableViewCellStyle.Subtitle, "pdfCell");
			}

			pdfCell.TextLabel.Text = pdfList[indexPath.Row];
			pdfCell.TextLabel.TextColor = UIColor.Black;

			pdfCell.DetailTextLabel.Text = "Created on: " + creationDate[indexPath.Row];
			pdfCell.DetailTextLabel.TextColor = UIColor.LightGray;

			pdfCell.Accessory = UITableViewCellAccessory.DisclosureIndicator;

			UIImageView screenShot = new UIImageView();
			screenShot.Frame = new CGRect(0, 20, 40, 40);
			screenShot.Image = this.thumbnailImage[indexPath.Row];

			//pdfCell.AccessoryView = screenShot;

			return pdfCell;
		}

		public void filteredContent(string searchedText)
		{
			this.appDelegate.newResultsWord = this.pdfList.Where((arg) => arg.ToLower().Contains(searchedText.ToLower()) || arg.ToUpper().Contains(searchedText.ToUpper())).ToList();

			this.TableView.ReloadData();

			this.appDelegate.tableView.ReloadData();
		}

		private void corruptController(int index)
		{
			var documents = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
			var directory = Directory.GetFiles(documents, "*.doc");

			UIAlertController corruptAlert = UIAlertController.Create("Corrupt file cannot be opened!", "'" + Path.GetFileName(directory[index]) + "'" + " cannot be opened because it appears to be corrupt. Would you like to delete this file?", UIAlertControllerStyle.Alert);

			UIAlertAction confirmed = UIAlertAction.Create("No", UIAlertActionStyle.Destructive, (UIAlertAction obj) =>
			{
				corruptAlert.Dispose();
			});

			UIAlertAction deleteFile = UIAlertAction.Create("Delete file", UIAlertActionStyle.Cancel, (UIAlertAction obj) =>
			{
				File.Delete(directory[index]);
				this.pdfList.RemoveAt(index);
				this.creationDate.RemoveAt(index);
				this.thumbnailImage.RemoveAt(index);

				int indexCorrupt = this.pdfList.IndexOf(this.pdfList[index]);
				int indexOfficial = this.corruptIndex.IndexOf(indexCorrupt);

				this.corruptIndex.RemoveAt(indexOfficial);
				this.TableView.ReloadData();
			});

			corruptAlert.AddAction(confirmed);
			corruptAlert.AddAction(deleteFile);

			if (this.PresentedViewController == null)
			{
				this.PresentViewController(corruptAlert, true, () =>
				{
					SystemSound sound = new SystemSound(4095);
					sound.PlaySystemSound();
				});
			}
			else {
				this.PresentedViewController.DismissViewController(true, () =>
				{
					this.PresentedViewController.Dispose();
					this.PresentViewController(corruptAlert, true, () =>
					{
						SystemSound sound = new SystemSound(4095);
						sound.PlaySystemSound();
					});
				});
			}
		}

		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			this.search.ResignFirstResponder();

			//has the user selected the cell
		
		/*	if (this.corruptIndex.Contains(indexPath.Row) == true)
			{
				//replace the previous indices inside the corrupt index list with the new indices 
				corruptController(indexPath.Row);
			}*/

			UIStoryboard story = UIStoryboard.FromName("Main", NSBundle.MainBundle);
			//pushes the web view controller that loads the PDF 
			tableView.DeselectRow(indexPath, true);

			appDelegate.wordString = tableView.CellAt(indexPath).TextLabel.Text;

			try
			{
				WordReader wordControl = story.InstantiateViewController("WordReader") as WordReader;
				if (wordControl == null)
				{
					throw new NullReferenceException();
				}
				else {
					this.NavigationController.PushViewController(wordControl, true);
				}
			}
			catch (NullReferenceException)
			{
				Console.WriteLine("Word Viewer");
			}
		}
	}

	public class searchUpdatorWord : UISearchResultsUpdating
	{
		WordController search = new WordController();

		public searchUpdatorWord(WordController searchValue)
		{
			search = searchValue;
		}

		public override void UpdateSearchResultsForSearchController(UISearchController searchController)
		{
			search.filteredContent(searchController.SearchBar.Text);
		}
	}

	public class resultsControllerWord : UITableViewController
	{

		public AppDelegate appDelegate
		{
			get
			{
				return (AppDelegate)UIApplication.SharedApplication.Delegate;
			}
		}

		//controller used to display results
		UISearchController search = new UISearchController();
		List<string> filteredResults = new List<string>() { "" };

		public resultsControllerWord() { }

		public resultsControllerWord(UISearchController searchController)
		{
			search = searchController;
		}

		public resultsControllerWord(UISearchController searchController, List<string> filteredResultsRef)
		{
			search = searchController;
			filteredResults = filteredResultsRef;
		}

		public override nint RowsInSection(UITableView tableView, nint section)
		{
			return this.appDelegate.newResultsWord.Count;
		}

		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			UITableViewCell cellSearch = new UITableViewCell(UITableViewCellStyle.Value1, "SearchCell");

			if (cellSearch == null)
			{
				cellSearch = new UITableViewCell(UITableViewCellStyle.Value1, "SearchCell");
			}

			cellSearch.TextLabel.Text = this.appDelegate.newResultsWord[indexPath.Row];
			cellSearch.TextLabel.TextColor = UIColor.Black;

			cellSearch.DetailTextLabel.Text = ">";
			cellSearch.DetailTextLabel.TextColor = UIColor.LightGray;

			return cellSearch;
		}

		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			//UIStoryboard story = UIStoryboard.FromName("Main", NSBundle.MainBundle);
			//pushes the web view controller that loads the PDF 
			this.appDelegate.tablePDFSearch = 1;
			this.DismissViewController(true, () =>
			{
				this.appDelegate.tableWordSearch = 1;
				int indexRow = this.appDelegate.resultsStringWord.IndexOf(tableView.CellAt(indexPath).TextLabel.Text);
				Console.WriteLine("Index to use: " + indexRow);
				this.appDelegate.selectedIndexWord = NSIndexPath.FromRowSection(indexRow, 0);

				//search cell has been selected
				this.appDelegate.searchedStringWord = tableView.CellAt(indexPath).TextLabel.Text;
				this.appDelegate.documentsWord.ViewDidAppear(true);
			});

			tableView.DeselectRow(indexPath, true);
		}

		public override void ViewDidAppear(bool animated)
		{
			this.TableView.Frame = new CGRect(0, -40, UIScreen.MainScreen.Bounds.Width, UIScreen.MainScreen.Bounds.Height);

			this.EdgesForExtendedLayout = UIRectEdge.None;

			this.TableView.ContentMode = UIViewContentMode.Top;

			this.appDelegate.tableView = this.TableView;

			this.TableView.ReloadData();

		}

		public override void ViewDidLoad()
		{
			this.EdgesForExtendedLayout = UIRectEdge.Top;
			this.TableView.ContentMode = UIViewContentMode.Top;
		}

		public override void TouchesEnded(NSSet touches, UIEvent evt)
		{
			if (evt.Type == UIEventType.Touches)
			{
				//Console.WriteLine("Table view count: " + this.appDelegate.newResults.Count);
			}
		}
	}
}
